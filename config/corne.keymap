/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&sk {
    release-after-ms = <2000>;
    quick-release;
    /delete-property/ ignore-modifiers;
};

/ {
    combos {
        compatible = "zmk,combos";
        combo_a_grave {
            timeout-ms = <30>;
            key-positions = <3 4>;  // O + É
            bindings = <&a_grave>;
        };
        combo_q {
            timeout-ms = <30>;
            key-positions = <7 8>;  // D + L
            bindings = <&kp Q>;
        };
        combo_underscore {
            timeout-ms = <30>;
            key-positions = <26 27>;  // Y + È
            bindings = <&kp UNDER>;
        };
        combo_dash {
            timeout-ms = <30>;
            key-positions = <27 28>;  // È + .
            bindings = <&kp MINUS>;
        };
        combo_c_cedilla {
            timeout-ms = <30>;
            key-positions = <31 32>;  // C + M
            bindings = <&c_cedilla>;
        };
        combo_z {
            timeout-ms = <30>;
            key-positions = <32 33>;  // M + H
            bindings = <&kp Z>;
        };
        combo_enter {
            timeout-ms = <30>;
            key-positions = <16 38>;  // U + SPACE
            bindings = <&kp ENTER>;
        };
    };

    macros {
        a_capital_grave: a_capital_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &kp GRAVE &kp LS(A)>
                ;
        };
        a_small_grave: a_small_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &kp GRAVE &kp A>
                ;
        };
        e_capital_grave: e_capital_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &kp GRAVE &kp LS(E)>
                ;
        };
        e_small_grave: e_small_grave {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_tap &kp GRAVE &kp E>
                ;
        };
        e_capital_acute: e_capital_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_press   &kp RALT>
                , <&macro_tap     &kp LS(E)>
                , <&macro_release &kp RALT>
                ;
        };
        e_small_acute: e_small_acute {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_press   &kp RALT>
                , <&macro_tap     &kp E>
                , <&macro_release &kp RALT>
                ;
        };
        c_capital_cedilla: c_capital_cedilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_press   &kp RALT>
                , <&macro_tap     &kp LS(COMMA)>
                , <&macro_release &kp RALT>
                ;
        };
        c_small_cedilla: c_small_cedilla {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_press   &kp RALT>
                , <&macro_tap     &kp COMMA>
                , <&macro_release &kp RALT>
                ;
        };
        apos: apos {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            wait-ms = <0>;
            tap-ms = <0>;
            bindings
                = <&macro_press   &kp APOSTROPHE>
                , <&macro_tap     &kp SPACE>
                ;
        };
    };
    
    behaviors {
        a_grave: a_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&a_small_grave>, <&a_capital_grave>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        e_grave: e_grave {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&e_small_grave>, <&e_capital_grave>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        e_acute: e_acute {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&e_small_acute>, <&e_capital_acute>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        c_cedilla: c_cedilla {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&c_small_cedilla>, <&c_capital_cedilla>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ap_qm: ap_qm {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&apos>, <&kp QMARK>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ca_ex: ca_ex {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp CARET>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        co_sc: co_sc {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dt_cl: dt_cl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mt_sk: mod_sticky_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&kp>, <&sk>;
            display-name = "Mod-Tap";
        };
        mt_mo_sk: mod_tap_mo {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&sk>, <&mo>;
            display-name = "Mod-Tap";
        };
    };
                                           
                                            
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  À  |  J  |  O  |  É  |  B  |      |  F  |  D  |  L  | ' ? |  Q  | BKSP |
            // | CTRL |  A  |  I  |  E  |  U  | , ; |      |  P  |  T  |  S  |  R  |  N  | ^ !  |
            // | SHFT |  K  |  Y  |  È  | . : |  W  |      |  G  |  C  |  M  |  H  |  V  | Z    |
            //                    | GUI | LWR | SPC |      | ENT | RSE | ALT |
            // LEGEND:
            // DT_CL = dot, colon
            // AP_QM = apostrophe, question mark
            // CO_SC = comma, semicolon
            // CA_EX = carret, exclamation point

            bindings = <
&kp TAB    &a_grave  &kp J  &kp O     &e_acute          &kp B            &kp F               &kp D        &kp L           &ap_qm  &kp Q  &kp BSPC
&kp LCTRL  &kp A     &kp I  &kp E     &kp U             &co_sc           &kp P               &kp T        &kp S           &kp R   &kp N  &ca_ex
&kp RET    &kp K     &kp Y  &e_grave  &dt_cl            &kp W            &kp G               &kp C        &kp M           &kp H   &kp V  &kp Z
                            &kp LGUI  &mt_mo_sk LALT 1  &kp SPACE        &mt_sk LCTRL LSHFT  &key_repeat  &mt_sk TAB ESC
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |      |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |      | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |      |     |     |     |     |     |      |
            //                    | GUI |     | SPC |      | ENT |     | ALT |

            bindings = <
&kp TAB     &kp N1        &kp N2        &kp N3        &kp N4        &kp N5          &kp N6    &kp N7    &kp N8    &kp N9     &kp N0  &kp BSPC
&bt BT_CLR  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LEFT  &kp DOWN  &kp UP    &kp RIGHT  &trans  &trans
&kp LSHFT   &trans        &trans        &trans        &trans        &trans          &trans    &trans    &trans    &trans     &trans  &trans
                                        &kp LGUI      &trans        &kp SPACE       &kp RET   &trans    &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |      |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |      |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |      |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |      | ENT |     | ALT |

            bindings = <
&kp TAB    &kp EXCL  &kp AT  &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPS   &kp ASTRK  &kp LPAR  &kp RPAR  &kp BSPC
&kp LCTRL  &trans    &trans  &trans    &trans    &trans       &kp MINUS  &kp EQUAL  &kp LBKT   &kp RBKT  &kp BSLH  &kp GRAVE
&kp LSHFT  &trans    &trans  &trans    &trans    &trans       &kp UNDER  &kp PLUS   &kp LBRC   &kp RBRC  &kp PIPE  &kp TILDE
                             &kp LGUI  &trans    &kp SPACE    &kp RET    &trans     &kp RALT
            >;
        };
    };
};
